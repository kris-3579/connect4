import numpy as np
import pygame
import sys
import math

pygame.init()

blue = (0,0,255)
black = (0,0,0)
red = (255,0,0)
yellow = (255,255,0)

rows = 6
cols = 7
square = 100
radius = int(square / 2)
width = cols * square
height = (rows + 1) * square

myfont = pygame.font.SysFont("monospace", 75)

win = pygame.display.set_mode((width, height))

def create_board():
    board = np.zeros((rows,cols))
    return board

def draw_board(board):
    for c in range(cols):
        for r in range(rows):
            pygame.draw.rect( win , blue, (c * square, r * square + square, square, square))
            pygame.draw.circle(win,black, (c * square + radius, r * square + radius + square) , radius - 5)

    for c in range(cols):
        for r in range(rows):
            if board[r][c] == 1:
                pygame.draw.circle(win, red, (c * square + radius,height -(r * square + radius)), radius - 5)
            elif board[r][c] == 2:
                pygame.draw.circle(win, yellow, (c * square + radius, height - (r * square + radius)), radius - 5)
    pygame.display.update()

def drop_piece(board, row, col, piece):
    board[row][col] = piece


def is_valid_location(board, col):
    return board[rows - 1][col] == 0

def print_board(board):
    print(np.flip(board, 0))

def get_next_open_row(board, col):
    for r in range(rows):
        if board[r][col] == 0:
            return r

def check_win(board, piece):
    # check horizontals for win
    for c in range(cols - 3):
        for r in range(rows):
            if board[r][c] == piece and board[r][c+1] and board[r][c+2] == piece and board[r][c+3] == piece:
                return True
    # checks verticals for wins
    for c in range(cols):
        for r in range(rows - 3):
            if board[r][c] == piece and board[r+1][c] and board[r+2][c] == piece and board[r+3][c] == piece:
                return True

    # checks postive diagnols
    for c in range(cols - 3):
        for r in range(rows - 3):
            if board[r][c] == piece and board[r + 1][c + 1] and board[r + 2][c + 2] == piece and board[r + 3][c + 3] == piece:
                return True
    # checks negative diagnols
    for c in range(cols - 3):
        for r in range(rows):
            if board[r][c] == piece and board[r - 1][c + 1] and board[r - 2][c + 2] == piece and board[r - 3][c + 3] == piece:
                return True



board = create_board()
print_board(board)
turn = 0
run = True
draw_board(board)
pygame.display.update()
while run:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()

        if event.type == pygame.MOUSEMOTION:
            pygame.draw.rect(win, black, (0,0, width, square))
            posx = event.pos[0]
            if turn == 0:
                pygame.draw.circle(win, red, (posx, radius), radius)

            else:
                pygame.draw.circle(win, yellow, (posx, radius), radius)

        if event.type == pygame.MOUSEBUTTONDOWN:
            pygame.draw.rect(win, black, (0, 0, width, square))
            posx = event.pos

            if turn == 0:
                posx = event.pos[0]
                col = int(math.floor(posx /square))


                if is_valid_location(board, col):
                    row = get_next_open_row(board, col)
                    drop_piece(board, row, col, 1)
                    print_board(board)
                    turn += 1
                    turn = turn % 2

                    if check_win(board, 1) == True:
                        print("player 1 wins")
                        label = myfont.render("Player 2 wins", 1, red)
                        win.blit(label,(40, 10))
                        run = False



            else:
                posx = event.pos[0]
                col = int(math.floor(posx / square))

                if is_valid_location(board, col):
                    row = get_next_open_row(board, col)
                    drop_piece(board, row, col, 2)
                    print_board(board)
                    turn += 1
                    turn = turn % 2

                    if check_win(board, 2) == True:
                        label = myfont.render("Player 2 wins", 1, yellow)
                        win.blit(label, (40, 10))
                        run = False

    draw_board(board)
    if run == False:
        win.blit(label, (40, 10))
        pygame.time.wait(1000)
